#include <bits/stdc++.h> 

int merge(long long *arr,int l,int m,int r, vector<int> t)
{
    int i=l;
    int j=m;
    int k=l;
    int ans=0;
    while(i<=m-1 && j<=r)
    {
          if(arr[i]<=arr[j])
          {
              t[k++]=arr[i++];
          }
          else{
              t[k++]=arr[j++];
              ans+=(m-i);
          }
    }
    while(i<=m-1)
    {
        t[k++]=arr[i++];
    }
    while(j<=r)
    {
        t[k++]=arr[j++];
    }
    for(int i=l;i<=r;i++)
    {
        arr[i]=t[i];
    }
    return ans;
}
int mergesort(long long *arr,int l,vector<int> t,int r)
{
    int mid,c=0;
    if(r>l)
    {
       int mid=l+(r-l)/2;
       c+=mergesort(arr,l,t,mid);
       c+=mergesort(arr,mid+1,t,r);
       c+=merge(arr,l,mid+1,r,t);
    }
    return c;
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    
    vector<int> t(n);
     return mergesort(arr,0,t,n-1);
    
    
}
