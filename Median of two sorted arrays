
/*void f(int i,int j,vector<int>&a,vector<int>&b)
{
	if(a[i]>b[j])
	{
		swap(a[i],b[j]);
	}
	return;
}

double median(vector<int>& a, vector<int>& b) {
	// Write your code here.
	int m=a.size();
	int n=b.size();
	int len=m+n;
	int gap=(len/2+len%2);
	
	if(m<n) {
		vector<int> t=a;
		a=b;
        b=t;
		int x=m;
		m=n;
		n=x;
	}
	while(gap>0)
	{
		int i=0;
		int j=i+gap;
		while(j<len){
		
		if(i<m && j>=m)
		{
			f(i,j-m,a,b);
        } else if (i >= m ) 
		{
                  f(i - m, j - m, b, b);
        }
		else{
			f(i,j,a,a);
		}
        i++;
		j=i+gap;
        }
        if(gap==1) break;
		gap=gap/2+gap%2;
	}
	
	if((m+n)%2!=0)
	{
        return a[(m+n)/2];
	}
	else{
		int x=(m+n)/2;
		//x=x-1;
		int y=x-1;
		if(x<m) 
		{
			return (a[x]+a[y])/2.0;
		}
		else if(x>=m && y<m)
		{
			//cout<<a[y]<<" "<<b[x-m]<<endl;
            return (a[y]+b[x-m])/2.0;
		}
		else if (x>=m && y>=m){
            return (b[x-m]+b[y-m])/2.0;
		}
	}
   
}*/
double median(vector<int>& a, vector<int>& b) {

    if(a.size() > b.size()) median(b, a);

    int n1 = a.size();

    int n2 = b.size();

    int l = 0, r = n1;

    while(l <= r){

        int m1 = l + (r - l) / 2;

        int m2 = (n1 + n2 + 1) / 2 - m1;

        int l1 = m1 == 0 ? INT_MIN : a[m1 - 1];

        int l2 = m2 == 0 ? INT_MIN : b[m2 - 1];

        int r1 = m1 == n1 ? INT_MAX : a[m1];

        int r2 = m2 == n2 ? INT_MAX : b[m2]; 

        if(l1 <= r2 and l2 <= r1){

            if((n1 + n2) % 2 == 0){

                return ((max(l1, l2)) + (min(r1, r2))) / 2.0;

            }else{

                return max(l1, l2);

            }

        }else if(l1 > r2){

            r = m1 - 1; 

        }else{

            l = m1 + 1;

        }

    }

}
