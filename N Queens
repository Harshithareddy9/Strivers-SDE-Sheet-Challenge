bool help(int r,int c,int n,vector<vector<int>> m)
{
     for(int i=0;i<=c;i++)
     {
         if(m[r][i]==1) return false;
     }
     
     int i=r;
     int j=c;
     while(i>=0 && j>=0)
     {
         if(m[i][j]==1) return false;
         i--;
         j--;
     }
     i=r,j=c;
     while(i<n && j>=0)
     {
         if(m[i][j]==1) return false;
         i++;
         j--;
     }
     return true;
}


vector<vector<int>> ans;
void f(int c,vector<vector<int>> m,int n)
{
    if(c==n)
    {
        vector<int> t;
        for(int j=0;j<n;j++)
        {
            for(int k=0;k<n;k++)
            {
                t.push_back(m[j][k]);
            }
        }
        ans.push_back(t);
        return;
    }
   
        for(int r=0;r<n;r++)
        {
            
                if(help(r,c,n,m))
                {
                    m[r][c]=1;
                    f(c+1,m,n);
                    m[r][c]=0;
                }
            
        }
    
}
vector<vector<int>> solveNQueens(int n) {
    // Write your code here.
    vector<vector<int>> m(n,vector<int>(n,0));
    f(0,m,n);
    return ans;
}
