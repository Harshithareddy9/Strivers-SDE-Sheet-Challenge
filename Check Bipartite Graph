bool dfs(int node, vector<int> adj[], vector<int> &c) {
  for (auto i : adj[node]) {
    if (c[i] == -1) {
      c[i] = 1 - c[node];
      if (!dfs(i, adj, c))
        return false;
    } else if (c[i] == c[node])
      return false;
  }

  return true;
}

bool isGraphBirpatite(vector<vector<int>> &edges) {
  int n = edges.size();
  vector<int> adj[n];

  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      if (edges[i][j]) {
        adj[i].push_back(j);
        adj[j].push_back(i);
      }
    }
  }

  vector<int> c(n, -1);
  for (int i = 0; i < n; i++) {
    if (c[i] == -1) {
      c[i] = 0;
      if (!dfs(i, adj, c))
        return false;
    }
  }

  return true;
}
