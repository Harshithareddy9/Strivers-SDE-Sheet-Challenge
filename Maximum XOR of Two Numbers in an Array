#include <bits/stdc++.h> 


class Node{
    public:
    int data;
    Node*next[2];
    Node(int data){
        this->data = data;
        for(int i = 0;i<2;i++){
            next[i] = NULL;
        }
    }
};

class Trie{
    public:
    Node *root;
    Trie(){
        root = new Node('\0');
    }
    void insert(int num){  
        Node *prev = root;
        for(int i = 31;i>=0;i--){ // inserting a 32 bit integer starting from the 
            int bit = (num>>i)&1;
           
            if(prev->next[bit]== NULL){
                
                prev->next[bit] = new Node(bit);// pushes the bit at 0 if bit is 0, 1 if the bit is 1
            }
            
            prev= prev->next[bit];
            
        }
    }

    int find_max(int num){
        int val = 0;
        Node *prev = root;
        for(int i = 31;i>=0;i--){
            int bit = (num>>i)&1;
            Node *next;
            if (bit & 1){// means the bit is 1
                if(prev->next[0]){ // check for 0 bit
                    next = prev->next[0];// put child on the 0th bit to maximize answer     
                    val = val |(1<<i); 
                }
                else{
                    next = prev->next[1];
                }
            } 
            else{ // bit is 0
                if(prev->next[1]){
                    next = prev->next[1];
                    val = val |(1<<i);
                }
                else{
                    next= prev->next[0];
                }
            }
            prev = next;
        }
        return val;
    }
};



int maximumXor(vector<int> A)
{
    Trie t;
    for(int i = 0;i<A.size();i++){
        t.insert(A[i]);
    }
    int ans = 0;
    int val = 0;
    for(int i = 0;i<A.size();i++){
        val = t.find_max(A[i]);
        ans = max(ans,val);
    }
    return ans; 
    
}
