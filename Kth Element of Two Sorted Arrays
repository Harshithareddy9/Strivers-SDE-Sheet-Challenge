/*void f(int i,int j,vector<int>&a,vector<int>&b)
{
	if(a[i]>b[j])
	{
		swap(a[i],b[j]);
	}
	return;
}


int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int m, int n, int k) {
    // Write your code here.
   
	int len=m+n;
	int gap=(len/2+len%2);
	
	
	while(gap>0)
	{
		int i=0;
		int j=i+gap;
		while(j<len){
		
		if(i<m && j>=m)
		{
			f(i,j-m,row1,row2);
        } else if (i >= m ) 
		{
                  f(i - m, j - m, row2, row2);
        }
		else{
			f(i,j,row1,row1);
		}
        i++;
		j=i+gap;
        }
        if(gap==1) break;
		gap=gap/2+gap%2;
	}
    if(k==m) return row1[m-1];
    if(k>m) return row2[k-m-1];
    else return row1[k-1];
}*/
#include <bits/stdc++.h>
using namespace std;

int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int n, int m, int k) {
  if (n > m)
    return ninjaAndLadoos(row2, row1, m, n, k);

  int low = max(0, k - m), high = min(n, k); // cannot take all elements 
  while (low <= high) {
    int cut1 = (low + high) >> 1;
    int cut2 = k - cut1;

    int l1 = cut1 == 0 ? INT_MIN : row1[cut1 - 1];
    int l2 = cut2 == 0 ? INT_MIN : row2[cut2 - 1];
    int r1 = cut1 == n ? INT_MAX : row1[cut1];
    int r2 = cut2 == m ? INT_MAX : row2[cut2];

    if (l1 <= r2 and l2 <= r1)
      return max(l1, l2);
    else if (l1 > r2)
      high = cut1 - 1;
    else
      low = cut1 + 1;
  }

  return 1;
}
